Technical ScrumMaster


After months of training and understanding agile coaching one thing was clear in this new workspace, your learning was never finished.  I heard this over and over and yet my inner thought was still that the job could be mastered, you could develop well performing teams and simply rinse and repeat.  What I have found in the last 2 years is that this is indeed possible (some will certainly object with me here).  You can do enough to get the work done, show you are making improvements, and satisfy the job description.  As a scrummaster though, you would be settling for mediocrity.

If you are moving and organization from waterfall into scrum to be more agile you will most likely focus on the organization change in regards to the people.  Getting them acclimated, showing them the process works and that there are in fact benefits to the way work is done.  You will work on relationships and building trust, coaching feature teams, managers, and product owners on how to move forward in spite of the culture shock. These tasks will be challenging and time consuming and give you a full time job...for the time being.

There will come a time when the feature teams, product owner, and managers mature under the agile transformation.  They will buy in to the process, understand how to do the work, and will no longer need you to constantly remind them of process and best practices.  Congratulations, you have done a great job moving the organization forward, but now what?

It is true that scrum teams need scrummasters and your job is not necessarily at risk, but your influence and value has started to diminish.  You can stretch yourself by adding multiple teams to your plate or looking for other behavioral changes to make within the group, but the real challenge is in the technical environment.

"I have never been a developer before," "I have never used any testing software in my life," "I worked in a non technical environment prior to this job."  If you think the excuses I listed in the prior sentence somehow alleviate you from helping find and implement new technical practices, you are wrong.  I will give you a real life example (the names are the only thing fictional) to show you it is indeed possible.

Bart is a currently a scrummaster.  In college he took some development classes but was never very good at them.  He started his careers as a business systems analyst.  He never had to do hands on testing or development work, but instead wrote functional requirements and talked to clients a lot.  Since Bart transitioned to a scrummaster, he was able to make an impact and help move an organization into scrum from waterfall.  As the org matured, Bart's skills about scrum were becoming less and less in demand.  But to continue acting as a change agent for the organization as a scrum master, Bart wanted to help make technical changes to the system that would drive it forward.

Bart starting asking the teams about problems and enhancements.  He saw people trying to make some changes but not catching much traction.  So he started to look into the possibilities people were discussing and help make them a reality.  He gathered a group together to discuss technical enhancements and to attempt a proof of concept.

Bart jumped in and got his hands dirty.  He learned how to use a new technical testing tool having no prior experience.  He learned out environments synched and the importance of test coverage.  He also learned how to use tools like GIT and tortoise to ensure proper change management.  At the end of the proof of concept Bart and the team of developers were experts on a new technical practice for the organization.

Telling you this true story has a simple message.  Every day scrum masters push team members to do work, to look for inefficiencies, and to inspect and adapt.  Scurmmasters you need to do the same thing you preach.  You need to learn technical practices if you truly want to be an effective scrummaster.  And like Bart, you don't need to be a technical guru to make an impact.  Do some research, learn what other companies do and use, and leverage that using the skills you already possess to drive it home.  We don't expect our teams to stop learning at some point; they will expect the same of us.
